# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import agent_pb2 as agent__pb2


class AgentStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Init = channel.unary_unary(
                '/agent.Agent/Init',
                request_serializer=agent__pb2.InitRequest.SerializeToString,
                response_deserializer=agent__pb2.InitResponse.FromString,
                )
        self.GetState = channel.unary_unary(
                '/agent.Agent/GetState',
                request_serializer=agent__pb2.GetStateRequest.SerializeToString,
                response_deserializer=agent__pb2.GetStateResponse.FromString,
                )
        self.SetState = channel.unary_unary(
                '/agent.Agent/SetState',
                request_serializer=agent__pb2.SetStateRequest.SerializeToString,
                response_deserializer=agent__pb2.SetStateResponse.FromString,
                )
        self.Step = channel.unary_unary(
                '/agent.Agent/Step',
                request_serializer=agent__pb2.StepRequest.SerializeToString,
                response_deserializer=agent__pb2.StepResponse.FromString,
                )
        self.Reset = channel.unary_unary(
                '/agent.Agent/Reset',
                request_serializer=agent__pb2.ResetRequest.SerializeToString,
                response_deserializer=agent__pb2.ResetResponse.FromString,
                )


class AgentServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Init(self, request, context):
        """Initialize MJPC Agent.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetState(self, request, context):
        """Get the simulation state.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetState(self, request, context):
        """Set state of the MJPC Agent.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Step(self, request, context):
        """Get the current action from the Agent.
        rpc GetAction(GetActionRequest) returns (GetActionResponse);
        Compute one plan step.
        rpc PlannerStep(PlannerStepRequest) returns (PlannerStepResponse);
        Step physics once, using actions from the planner.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Reset(self, request, context):
        """Reset the Agent.
        // Set a task parameters.
        rpc SetTaskParameters(SetTaskParametersRequest)
        returns (SetTaskParametersResponse);
        // Get a task parameters.
        rpc GetTaskParameters(GetTaskParametersRequest)
        returns (GetTaskParametersResponse);
        Set cost weights.
        rpc SetCostWeights(SetCostWeightsRequest) returns (SetCostWeightsResponse);
        // Get cost term values.
        rpc GetCostValuesAndWeights(GetCostValuesAndWeightsRequest)
        returns (GetCostValuesAndWeightsResponse);
        // Set mode.
        rpc SetMode(SetModeRequest) returns (SetModeResponse);
        // Get mode.
        rpc GetMode(GetModeRequest) returns (GetModeResponse);
        // Get all modes.
        rpc GetAllModes(GetAllModesRequest) returns (GetAllModesResponse);
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AgentServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Init': grpc.unary_unary_rpc_method_handler(
                    servicer.Init,
                    request_deserializer=agent__pb2.InitRequest.FromString,
                    response_serializer=agent__pb2.InitResponse.SerializeToString,
            ),
            'GetState': grpc.unary_unary_rpc_method_handler(
                    servicer.GetState,
                    request_deserializer=agent__pb2.GetStateRequest.FromString,
                    response_serializer=agent__pb2.GetStateResponse.SerializeToString,
            ),
            'SetState': grpc.unary_unary_rpc_method_handler(
                    servicer.SetState,
                    request_deserializer=agent__pb2.SetStateRequest.FromString,
                    response_serializer=agent__pb2.SetStateResponse.SerializeToString,
            ),
            'Step': grpc.unary_unary_rpc_method_handler(
                    servicer.Step,
                    request_deserializer=agent__pb2.StepRequest.FromString,
                    response_serializer=agent__pb2.StepResponse.SerializeToString,
            ),
            'Reset': grpc.unary_unary_rpc_method_handler(
                    servicer.Reset,
                    request_deserializer=agent__pb2.ResetRequest.FromString,
                    response_serializer=agent__pb2.ResetResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'agent.Agent', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Agent(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Init(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/agent.Agent/Init',
            agent__pb2.InitRequest.SerializeToString,
            agent__pb2.InitResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetState(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/agent.Agent/GetState',
            agent__pb2.GetStateRequest.SerializeToString,
            agent__pb2.GetStateResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetState(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/agent.Agent/SetState',
            agent__pb2.SetStateRequest.SerializeToString,
            agent__pb2.SetStateResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Step(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/agent.Agent/Step',
            agent__pb2.StepRequest.SerializeToString,
            agent__pb2.StepResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Reset(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/agent.Agent/Reset',
            agent__pb2.ResetRequest.SerializeToString,
            agent__pb2.ResetResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
